// @TODO: can be moved to another place as a utils
import {IPageSuggestion, ISortDirection, ITargetWithSelected} from "./suggestion.typings";
import { FILTER_ACTIONS } from "./constants";
import _ from "lodash";

export const filterRowsByColumnModifier = (filters: {[key: string]: string}, selectedSources: string[], rows: IPageSuggestion[]): IPageSuggestion[] => {
    let filteredResults = [...rows];

    Object.values(filters).forEach(filter => {
        switch (filter) {
            case FILTER_ACTIONS.SHOW_SELECTED:
            case FILTER_ACTIONS.SHOW_UNSELECTED: {
                filteredResults = filteredResults.filter(
                    row => filter === FILTER_ACTIONS.SHOW_SELECTED
                        ? selectedSources.includes(row.uri)
                        : !selectedSources.includes(row.uri)
                );
                break;
            }

            case FILTER_ACTIONS.SHOW_MATCHES:
            case FILTER_ACTIONS.SHOW_GENERATED: {
                filteredResults = filteredResults.filter(row => {
                    const selected = selectedCandidate(row)
                    return filter === FILTER_ACTIONS.SHOW_GENERATED
                        ? selected._autogenerated
                        : !selected._autogenerated
                });
                break;
            }

            case FILTER_ACTIONS.SHOW_VALUE_MAPPINGS:
            case FILTER_ACTIONS.SHOW_OBJECT_MAPPINGS: {
                const type = filter === FILTER_ACTIONS.SHOW_VALUE_MAPPINGS ? 'value' : 'object';
                filteredResults = filteredResults.filter(row => {
                    const selected = selectedCandidate(row)
                    return selected.type === type
                });
                break;
            }

            default:
                break;
        }
    });

    return filteredResults;
};


export const sortRows = (rows: IPageSuggestion[], sortDirections: ISortDirection) => {
    const {column, modifier} = sortDirections;
    let sortFn = (item: IPageSuggestion) => item[column];

    const isTargetColumn = column === 'target';
    if (isTargetColumn || column === 'type') {
        sortFn = (item: IPageSuggestion) => {
            const selected = item.candidates
                .filter(c => isTargetColumn ? !c._autogenerated : true)
                .find(c => c._selected);
            if (selected) {
                return selected[isTargetColumn ? 'label' : 'type']
            }
            return -1;
        }
    }
    return _.orderBy(rows, sortFn, modifier as 'asc' | 'desc');
};

// Returns the selected candidate or the first entry if no entry is marked as selected.
export const selectedCandidate = (target: IPageSuggestion): ITargetWithSelected => {
    if(target.candidates.length > 0) {
        const selected = target.candidates.filter((candidate) => candidate._selected)
        if(selected.length > 0) {
            return selected[0]
        } else {
            return target.candidates[0]
        }
    } else {
        return undefined
    }
}
