// @TODO: can be moved to another place as a utils
import { IPageSuggestion, ISortDirection } from "./suggestion.typings";
import { FILTER_ACTIONS } from "./constants";
import _ from "lodash";

export const filterRowsByColumnModifier = (filters: {[key: string]: string}, selectedSources: string[], rows: IPageSuggestion[]): IPageSuggestion[] => {
    let filteredResults = [...rows];

    Object.values(filters).forEach(filter => {
        switch (filter) {
            case FILTER_ACTIONS.SHOW_SELECTED:
            case FILTER_ACTIONS.SHOW_UNSELECTED: {
                filteredResults = filteredResults.filter(
                    row => filter === FILTER_ACTIONS.SHOW_SELECTED
                        ? selectedSources.includes(row.source)
                        : !selectedSources.includes(row.source)
                );
                break;
            }

            case FILTER_ACTIONS.SHOW_MATCHES:
            case FILTER_ACTIONS.SHOW_GENERATED: {
                filteredResults = filteredResults.filter(
                    row => filter === FILTER_ACTIONS.SHOW_GENERATED
                        ? row.candidates.every(t => t._autogenerated)
                        : !row.candidates.every(t => t._autogenerated)
                );
                break;
            }

            case FILTER_ACTIONS.SHOW_VALUE_MAPPINGS:
            case FILTER_ACTIONS.SHOW_OBJECT_MAPPINGS: {
                const type = filter === FILTER_ACTIONS.SHOW_VALUE_MAPPINGS ? 'value' : 'object';
                filteredResults = filteredResults.filter(
                    row => row.candidates.some(t => t.type === type)
                );
                break;
            }

            default:
                break;
        }
    });

    return filteredResults;
};


export const sortRows = (rows: IPageSuggestion[], sortDirections: ISortDirection) => {
    return _.orderBy(rows, sortDirections.column, sortDirections.modifier as 'asc' | 'desc');
};
